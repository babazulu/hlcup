// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFd15411aDecodeGithubComEiGradHlcupModels(in *jlexer.Lexer, out *UserVisit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "visited_at":
			out.VisitedAt = int(in.Int())
		case "place":
			out.Place = string(in.String())
		case "mark":
			out.Mark = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFd15411aEncodeGithubComEiGradHlcupModels(out *jwriter.Writer, in UserVisit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int(int(in.VisitedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	out.String(string(in.Place))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Uint8(uint8(in.Mark))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserVisit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFd15411aEncodeGithubComEiGradHlcupModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserVisit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFd15411aEncodeGithubComEiGradHlcupModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserVisit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFd15411aDecodeGithubComEiGradHlcupModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserVisit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFd15411aDecodeGithubComEiGradHlcupModels(l, v)
}
func easyjsonFd15411aDecodeGithubComEiGradHlcupModels1(in *jlexer.Lexer, out *LocationMark) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Visit":
			out.Visit = uint32(in.Uint32())
		case "User":
			out.User = uint32(in.Uint32())
		case "VisitedAt":
			out.VisitedAt = int(in.Int())
		case "BirthDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BirthDate).UnmarshalJSON(data))
			}
		case "Gender":
			out.Gender = uint8(in.Uint8())
		case "Mark":
			out.Mark = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFd15411aEncodeGithubComEiGradHlcupModels1(out *jwriter.Writer, in LocationMark) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Visit\":")
	out.Uint32(uint32(in.Visit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"User\":")
	out.Uint32(uint32(in.User))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"VisitedAt\":")
	out.Int(int(in.VisitedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"BirthDate\":")
	out.Raw((in.BirthDate).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Gender\":")
	out.Uint8(uint8(in.Gender))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Mark\":")
	out.Uint8(uint8(in.Mark))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocationMark) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFd15411aEncodeGithubComEiGradHlcupModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocationMark) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFd15411aEncodeGithubComEiGradHlcupModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocationMark) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFd15411aDecodeGithubComEiGradHlcupModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocationMark) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFd15411aDecodeGithubComEiGradHlcupModels1(l, v)
}
