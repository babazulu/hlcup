// Code generated by "cmap-gen -package maps -type Visit"; DO NOT EDIT.

package maps

import "hash/fnv"
import "sync"

// VisitMap is sharded concurrent map which key type is string and
// value type is Visit
type VisitMap struct {
	shards []*VisitShard
	n      uint32
}

// NewVisitMap creates new VisitMap with specified shards count
func NewVisitMap(nShards int) *VisitMap {
	shards := make([]*VisitShard, nShards)
	for i := 0; i < nShards; i++ {
		shards[i] = NewVisitShard()
	}
	return &VisitMap{shards: shards, n: uint32(nShards)}
}

func (c VisitMap) hash(s string) uint32 {
	h := fnv.New32a()
	_, err := h.Write([]byte(s))
	if err != nil {
		panic(err)
	}
	return h.Sum32() % c.n
}

// Get returns the value stored by specified key
func (c VisitMap) Get(key string) Visit {
	return c.shards[c.hash(key)].Get(key)
}

// Set stores the specified value under the specified key
func (c VisitMap) Set(key string, value Visit) {
	c.shards[c.hash(key)].Set(key, value)
}

// VisitShard is concurrent map which key type is string and
// value type is Visit
type VisitShard struct {
	mu   sync.RWMutex
	data map[string]Visit
}

// NewVisitShard creates new VisitShard
func NewVisitShard() *VisitShard {
	return &VisitShard{
		data: make(map[string]Visit),
	}
}

// Get returns the value stored by specified key
func (c *VisitShard) Get(key string) Visit {
	c.mu.RLock()
	defer c.mu.RUnlock()
	return c.data[key]
}

// Set stores the specified value under the specified key
func (c *VisitShard) Set(key string, value Visit) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.data[key] = value
}
